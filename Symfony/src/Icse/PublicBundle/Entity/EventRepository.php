<?php

namespace Icse\PublicBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * EventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventRepository extends EntityRepository
{
    /**
     * @return \AppendIterator
     */
    public function findAllEventsDescUnknownFirst()
    {
        $known_events = $this->getEntityManager()
                             ->createQuery ('SELECT e
                                             FROM IcsePublicBundle:Event e
                                             WHERE e.starts_at IS NOT NULL
                                             ORDER BY e.starts_at DESC')
                             ->getResult();
        $unknown_events = $this->getEntityManager()
                               ->createQuery ('SELECT e
                                               FROM IcsePublicBundle:Event e
                                               WHERE e.starts_at IS NULL')
                               ->getResult();

        $result = new \AppendIterator();
        $result->append(new \ArrayIterator($unknown_events));
        $result->append(new \ArrayIterator($known_events));

        return $result;
    }

    public function findEventsWithKnownDate()
    {
      return $this->getEntityManager()
                  ->createQuery ('SELECT e 
                                  FROM IcsePublicBundle:Event e
                                  WHERE e.starts_at IS NOT NULL
                                  ORDER BY e.starts_at DESC')
                  ->getResult();
    }

    public function findPastEvents()
    {
      return $this->getEntityManager()
                  ->createQuery ('SELECT e
                                  FROM IcsePublicBundle:Event e
                                  WHERE e.starts_at IS NOT NULL
                                  AND e.starts_at < :time
                                  ORDER BY e.starts_at DESC')
                  ->setParameters(array('time' => new \DateTime("today")))
                  ->getResult();
    }

    public function findTodayEvents()
    {
      return $this->getEntityManager()
                  ->createQuery ('SELECT e 
                                  FROM IcsePublicBundle:Event e
                                  WHERE e.starts_at >= :starttime
                                  AND e.starts_at < :endtime
                                  ORDER BY e.starts_at ASC')
                  ->setParameters(array('starttime' => new \DateTime("today"),
                                        'endtime' => new \DateTime("tomorrow")))
                  ->getResult();
    }

    public function findTomorrowEvents()
    {
      return $this->getEntityManager()
                  ->createQuery ('SELECT e 
                                  FROM IcsePublicBundle:Event e
                                  WHERE e.starts_at >= :starttime
                                  AND e.starts_at < :endtime
                                  ORDER BY e.starts_at ASC')
                  ->setParameters(array('starttime' => new \DateTime("tomorrow"),
                                        'endtime' => new \DateTime("tomorrow +1 day")))
                  ->getResult();
    }

    public function findLaterThisWeekEvents()
    {
      return $this->getEntityManager()
                  ->createQuery ('SELECT e 
                                  FROM IcsePublicBundle:Event e
                                  WHERE e.starts_at >= :starttime
                                  AND e.starts_at < :endtime
                                  ORDER BY e.starts_at ASC')
                  ->setParameters(array('starttime' => new \DateTime("tomorrow +1 day"),
                                        'endtime' => new \DateTime("next monday")))
                  ->getResult();
    }


    public function findNextWeekEvents()
    {
      return $this->getEntityManager()
                  ->createQuery ('SELECT e 
                                  FROM IcsePublicBundle:Event e
                                  WHERE e.starts_at >= :starttime
                                  AND e.starts_at < :endtime
                                  ORDER BY e.starts_at ASC')
                  ->setParameters(array('starttime' => max(new \DateTime("next monday"), new \DateTime("tomorrow +1 day")),
                                        'endtime' => new \DateTime("next monday +1 week")))
                  ->getResult();
    }



    public function findOtherFutureEvents()
    {
      return $this->getEntityManager()
                  ->createQuery ('SELECT e 
                                  FROM IcsePublicBundle:Event e
                                  WHERE e.starts_at >= :time
                                  ORDER BY e.starts_at ASC')
                  ->setParameters(array('time' => new \DateTime("next monday +1 week")))
                  ->getResult();
    }

    public function findFutureEvents()
    {
      return $this->getEntityManager()
                  ->createQuery ('SELECT e 
                                  FROM IcsePublicBundle:Event e
                                  WHERE e.starts_at >= :time
                                  ORDER BY e.starts_at ASC')
                  ->setParameters(array('time' => new \DateTime("today")))
                  ->getResult();
    }

    public function findPastEventsInYear($year)
    {
      return $this->getEntityManager()
                  ->createQuery ('SELECT e 
                                  FROM IcsePublicBundle:Event e
                                  WHERE e.starts_at >= :starttime
                                  AND e.starts_at < :endtime
                                  ORDER BY e.starts_at DESC')
                  ->setParameters(array('starttime' => new \DateTime($year . "-01-01"),
                                        'endtime' => min(new \DateTime($year + 1 . "-01-01"), new \DateTime("today"))))
                  ->getResult();
    }

    public function yearOfFirstEvent()
    {
      $date = new \DateTime(($this->getEntityManager()
                                  ->createQuery ('SELECT MIN(e.starts_at) from IcsePublicBundle:Event e')
                                  ->getSingleScalarResult()));
      return $date->format('Y');
    }

    public function yearOfMostRecentEvent()
    {
      $date = new \DateTime(($this->getEntityManager()
                                  ->createQuery ('SELECT MAX(e.starts_at)
                                                  FROM IcsePublicBundle:Event e
                                                  WHERE e.starts_at < :time')
                                  ->setParameters(array('time' => new \DateTime("today")))
                                  ->getSingleScalarResult()));
      return $date->format('Y');
    }

    public function findNMostRecentEventsWithPosters($n)
    {
      return $this->getEntityManager()
                  ->createQuery ('SELECT e 
                                  FROM IcsePublicBundle:Event e
                                  WHERE e.starts_at < :time
                                  AND e.poster IS NOT NULL
                                  ORDER BY e.starts_at DESC')
                  ->setMaxResults($n)
                  ->setParameters(array('time' => new \DateTime("today")))
                  ->getResult();
    }
}
