<?php

namespace Icse\MembersBundle\Entity;

use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;

/**
 * MemberRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MemberRepository extends EntityRepository implements UserProviderInterface
{
  public function loadUserByUsername($username)
  {
    $query = $this->createQueryBuilder('u')
                  ->where('u.username = :username OR u.email = :email')
                  ->setParameter('username', $username)
                  ->setParameter('email', $username)
                  ->getQuery();

    try {
      $user = $query->getSingleResult();
    } catch (NoResultException $e) {
      throw new UsernameNotFoundException(sprintf('Unable to find a Member object identified by "%s".', $username));
    }

    return $user;
  }

  public function refreshUser(UserInterface $user)
  {
    $class = get_class($user);
    if (!$this->supportsClass($class)) {
      throw new UnsupportedUserException(sprintf('Instances of "%s" are not supported.', $class));
    }

    return $this->loadUserByUsername($user->getUsername());
  }

  public function supportsClass($class)
  {
    return $this->getEntityName() === $class || is_subclass_of($class, $this->getEntityName());
  }

    public function isUnusedUsernameAndEmail($username, $email) {
        $matching_usernames = $this->createQueryBuilder('u')
                                   ->where('u.username = :username')
                                   ->setParameter('username', $username)
                                   ->getQuery()
                                   ->getResult();
        if (empty($matching_usernames)) {
            $matching_emails = $this->createQueryBuilder('u')
                                    ->where('u.email = :email')
                                    ->setParameter('email', $email)
                                    ->getQuery()
                                    ->getResult();
            if (empty($matching_emails)) {
                return true;
            }

        }
        return false;
    }
}
